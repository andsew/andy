Archiving and Logging Data
Please edit this file by adding the solution commands on the line below the prompt.
Save and submit the completed file for your homework submission.



Step 1: Create, Extract, Compress, and Manage tar Backup Archives
	1.	Command to extract the TarDocs.tar archive to the current directory:$ tar xvvf TarDocs.tar The above command was done once I had moved the TarDocs.tar in /Projects Directory 
	2.	Command to create the Javaless_Doc.tar archive from the TarDocs/ directory, while excluding the TarDocs/Documents/Java directory:sysadmin@UbuntuDesktop:~/Projects$ sudo tar cvvWf Javaless_Doc.tar --exclude=Java ~/Projects/TarDocs/Documents/   
	3.	Command to ensure Java/ is not in the new Javaless_Docs.tar archive: 
sysadmin@UbuntuDesktop:~/Projects$ sudo tar tvvf Javaless_Doc.tar | grep Java  
Bonus
	•	Command to create an incremental archive called logs_backup_tar.gz with only changed files to snapshot.file for the /var/log directory:$ sudo tar czvvWf logs_backup.tar.gz --listed-incremental=snapshot.snar /var/log 
Critical Analysis Question
	•	Why wouldn't you use the options -x and -c at the same time with tar?: Since we can’t extract and create at the same time  



Step 2: Create, Manage, and Automate Cron Jobs
	1.	Cron job for backing up the /var/log/auth.log file: 
Crontab -e 
Then add the following:
0 6 * * 3 tar cvvzf auth_backup.tgz /var/log/auth.log





Step 3: Write Basic Bash Scripts
	1.	Brace expansion command to create the four subdirectories: mkdir -p ~/backups/{freemem,diskuse,openlist,freedisk} 
Paste your system.sh script edits below:   #!/bin/bash
	2.	[Your solution script contents here] 
# Prints the amount of free memory on the system and saves
free -h > ~/backups/freemem/free_mem.txt
# Prints disk usage and saves it 
du -h > ~/backups/diskuse/disk_usage.txt
#Lists all open files and saves it
lsof /dev/null > ~/backups/openlist/open_list.txt
#Prints file system disk space statistics and saves it
df -h > ~/backups/freedisk/free_disk.txt

  
	3.	Command to make the system.sh script executable: chmod +x system.sh 

Optional
	•	Commands to test the script and confirm its execution: sudo ./system.sh 
Bonus
	•	Command to copy system to system-wide cron directory: sudo cp system.sh /etc/cron.weekly 



Step 4. Manage Log File Sizes
	1.	Run sudo nano /etc/logrotate.conf to edit the logrotate configuration file. nano auth   Configure a log rotation scheme that backs up authentication messages to the /var/log/auth.log.   
	◦	Add your config file edits below: 
	2.	[Your logrotate scheme edits here] 
 /var/log/auth.log {
    weekly
    rotate 7
    notifempty
    compress
    delay compress
    missingok
    endscript
}



  



Bonus: Check for Policy and File Violations
	1.	Command to verify auditd is active:  systemctl status auditd   
	2.	Command to set number of retained logs and maximum log file size:sudo nano /etc/audit/auditd.conf   
	◦	Add the edits made to the configuration file below: 
	3.	[Your solution edits here] num_logs = 7 max_log_file = 35 
	4.	Command using auditd to set rules for /etc/shadow, /etc/passwd and /var/log/auth.log: sudo nano /etc/audit/rules.d/audit.rules   
	◦	Add the edits made to the rules file below: 
	5.	[Your solution edits here] -w /etc/shadow -p wa -k hashpass_audit -w /etc/passwd -p wa -k userpass_audit -w /var/log/auth.log -p wa -k authlog_audit   
	6.	Command to restart auditd:sudo systemctl restart auditd   
	7.	Command to list all auditd rules:sudo auditctl -l   
	8.	Command to produce an audit report:sudo aureport -au   
	9.	Create a user with sudo useradd attacker and produce an audit report that lists account modifications: sudo useradd attacker sudo aureport -m 
	10.	Command to use auditd to watch /var/log/cron: sudo nano /etc/audit/rules.d/audit.rules (To be able to add rules) -w /var/log/cron -p wa -k cron_audit  (Added Rule) sudo systemctl restart auditd (Need to restart auditd deamon)   
	11.	Command to verify auditd rules:sudo auditctl -l   



Bonus (Research Activity): Perform Various Log Filtering Techniques
	1.	Command to return journalctl messages with priorities from emergency to error:  sudo journalctl -b -1  -p "0".."3"   
	2.	Command to check the disk usage of the system journal unit since the most recent boot: sudo journalctl -b -1 --disk-usage | less 
	3.	Command to remove all archived journal files except the most recent two: sudo journalctl --vacuum-file=2   
	4.	Command to filter all log messages with priority levels between zero and two, and save output to /home/sysadmin/Priority_High.txt:sudo journalctl -p "0".."2" > /home/sysadmin/Priority_High.txt   
	5.	Command to automate the last command in a daily cronjob. Add the edits made to the crontab file below: 
sudo crontab -e   [Your solution cron edits here]
@daily sudo journalctl -p "emerg".."crit" >> /home/sysadmin/Priority_High.txt
